% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_watershed.R
\name{predict_watershed}
\alias{predict_watershed}
\title{Predict Watershed}
\usage{
predict_watershed(
  training_input,
  prediction_input,
  number_dimensions = 1,
  model_name = "Watershed_exact",
  dirichlet_prior_parameter = 10,
  l2_prior_parameter = 0.1,
  output_prefix = "watershed",
  binary_pvalue_threshold = 0.1,
  lambda_costs = c(0.1, 0.01, 0.001),
  nfolds = 5,
  vi_step_size = 0.8,
  vi_threshold = 1e-08
)
}
\arguments{
\item{training_input}{String. The Watershed input file containing instances used to train the model.
Either a file path or a URL.}

\item{prediction_input}{String. The Watershed input file containing instances to predict on.
Either a file path or a URL.}

\item{number_dimensions}{Integer representing the number of outlier types. 
Sometimes referred to as \code{E} in our documentation.}

\item{model_name}{String identifier corresponding to the model to use. 
Options are "RIVER", "Watershed_exact", and "Watershed_approximate"}

\item{dirichlet_prior_parameter}{Float parameter defining Dirichlet distribution that acts 
as a prior a Phi (the model parameters defining \code{E|Z})}

\item{l2_prior_parameter}{Float defining the L2 (gaussian) distribution that acts 
as a prior on the parameters defining the conditional random field \code{P(Z|G)}. 
If set to NULL, Watershed will run a grid search on held-out data to select an 
optimal L2 prior. Default: 0.1}

\item{output_prefix}{String corresponding to the prefix of all output files generated by this function}

\item{binary_pvalue_threshold}{Float. Absolute p-value threshold used to create 
binary outliers used for Genomic Annotation Model. Default: 0.1}

\item{lambda_costs}{Numeric vector of length 3. If \code{l2_prior_parameter} is NULL, 
perform grid search over the following values of lambda to determine optimal lambda.
Default: \code{c(.1, .01, 1e-3)}}

\item{nfolds}{Integer. If \code{l2_prior_parameter} is NULL, Number of folds 
to be used in K-fold cross validation for Genomic annotation model. Default: 5}

\item{vi_step_size}{Float. Parameter used for Variational Optimization. 
Only applies if \code{model_name == "Watershed_approximate"}. Default: 0.8}

\item{vi_threshold}{Float. Parameter used for Variational Optimization. 
Only applies if \code{model_name == "Watershed_approximate"}. Default: 1e-8}
}
\description{
Train Watershed model on training data and predict Watershed posterior probabilities 
(using Watershed parameters optimized in training) on all gene-individual in a much larger prediction data set.
}
\details{
"Watershed_exact" is Watershed where parameters are optimized via exact inference 
(tractable and recommended when \code{E} is small. A general rule of thumb is if \code{E} is 
less than equal to 4, exact inference should be used). "Watershed_approximate" 
is Watershed where parameters are optimized using approximate inference. 
This approach is tractable when \code{E} is large.

This function saves a tab-separated file to \code{${output_prefix}posterior_probability.txt}.
Each line of this file corresponds to an instance (a line) in the prediction input file 
\code{$prediction_input}. The "sample_names" column provides the identifier for the gene-individual 
pair corresponding to the given line. There is an additional column for each of the 
\code{E} outliers, where the column corresponding to outlier \code{e} represents the 
Watershed marginal posterior probability for outlier \code{e}.
}
\examples{
# Note for convenience, the training file is the same as the prediction file. 
# This does not necessarily have to be the case.
input = paste0("https://raw.githubusercontent.com/BennyStrobes/Watershed/",
     "master/example_data/watershed_example_data.txt")

# For all examples, use example data that has 3 E outlier p-value columns, 
# which corresponds to number_of_dimensions = 3

\dontrun{
# Run using Watershed approximate inference
predict_watershed(training_input = input, 
                  prediction_input = input,
                  model_name = "Watershed_approximate", 
                  number_dimensions = 3,
                  output_prefix = "watershed_approximate_n3")

# Run using Watershed exact inference
predict_watershed(training_input = input, 
                  prediction_input = input,
                  model_name = "Watershed_exact", 
                  number_dimensions = 3,
                  output_prefix = "watershed_exact_n3")

# Run using RIVER
predict_watershed(training_input = input, 
                  prediction_input = input,
                  model_name = "RIVER", 
                  number_dimensions = 3,
                  output_prefix = "river_n3")
}

}
\seealso{
[evaluate_watershed]
}
